// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  shadowDatabaseUrl = env("STAGING_DATABASE_URL")
  relationMode = "prisma"
}

// next-auth integration

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// holdfast integration

model HoldfastUser {
  id Int @id @default(autoincrement())
  steamId Int
  isOnline Boolean @default(false)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  role UserRoles?
}

model UserRoles {
  id Int @id @default(autoincrement())
  roleId Int
  holdfastUserId Int @unique
  holdfastUser HoldfastUser @relation(fields: [holdfastUserId], references: [id])
  holdfastRole holdfastRole @relation(fields: [roleId], references: [id])
  updatedAt DateTime @default(now()) @db.Timestamp(6)
}

model holdfastRole {
  id Int @id @default(autoincrement())
  name String
  userRoles UserRoles[]
}